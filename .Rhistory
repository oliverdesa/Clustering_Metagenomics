Group = c(rep("PBS", length(PBS)), rep("SagA", length(SagA))),
Value = c(PBS, SagA)
)
# Define custom colors for each group
custom_colors <- c("PBS" = "grey", "SagA" = "#7E73AB")
# Calculate the mean and standard error for each group
mean_se_values <- aggregate(Value ~ Group, data, function(x) c(mean = mean(x), se = sd(x)/sqrt(length(x))))
mean_se_values <- do.call(data.frame, mean_se_values)
names(mean_se_values)[2:3] <- c("Mean", "SE")
# Create the plot
p <- plot <- ggplot(data, aes(x = Group, y = Value, color = Group)) +
geom_point(size = 4, position = position_dodge(width = 0.5)) +
geom_errorbar(data = mean_se_values, aes(x = Group, ymin = Mean - SE, ymax = Mean + SE), width = 0.2, color = "black", inherit.aes = FALSE) +
geom_segment(data = mean_se_values, aes(x = as.numeric(Group) - 0.1, xend = as.numeric(Group) + 0.1, y = Mean, yend = Mean), linetype = "dashed", color = "black", size = 1) +
scale_color_manual(values = custom_colors) +
labs(x = "Treatment", y = "OD650") +
theme_minimal()
# Display the plot
print(plot)
ggsave('HDC+SaGA.png', plot=p, height=2, width=4, units='in', dpi=300, )
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(multcomp)
CXCL1 <- c(90.02063041, 77.71854708, 64.42647059, 35.50200535, 27.73328877, 26.60962567, 14.0434583, 0)
concentrations <- c(10000, 5000, 2500, 1250, 625, 312.25, 155, 0)
data <- data.frame(Concentration = concentrations, OpticalDensity = optical_densities)
# Set the file name, dimensions, and resolution
png("barplotCXCL1.png", width = 6, height = 4, units = "in", res = 300)
# Create the plot
barplot(CXCL1, names.arg = concentrations,
xlab = "[MDP] ng/mL", ylab = "[CXCL1] pg/mL",
main = "BMDM CXCL1 Standard Curve",
col ="#7e73ab")
dev.off()
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
CXCL1 = c(153.916844, 0, 32.275884, 154.434188, 70.41154, 0, 0, 0, 278.633624, 123.881432, 234.690682, 270.757361, 154.121059, 213.615695, 263.687331, 293.542706, 0, 0, 17.881016, 128.022382)
CXCL1 = CXCL1*1000
print(CXCL1)
data <- data.frame(
Patient = c('B001A', 'B001B', 'B002A', 'B002B', 'B003A', 'B003B', 'B004A', 'B004B', 'B006A', 'B006B', 'B009A', 'B009B', 'B012A', 'B012B', 'B018A', 'B018B', 'B019A', 'B019B', 'B023A', 'B023B'),
CXCL1 = CXCL1,
Response = c('Responder', 'Responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Responder', 'Responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Responder', 'Responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Non-responder', 'Responder', 'Responder'),
engraftment = c('N', 'N', 'Y', 'Y', 'NA', 'NA', 'Y', 'Y', 'N', 'N', 'N', 'N', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'N', 'N')
)
# Calculate the difference in CXCL1 between paired samples
n <- nrow(data)
paired_diff <- numeric(n/2)
engraftment <- character(n/2)
for (i in seq(1, n, by = 2)) {
paired_diff[((i+1)/2)] <- data$CXCL1[i+1] - data$CXCL1[i]
engraftment[((i+1)/2)] <- data$engraftment[i+1]
}
# Create a new data frame with the calculated differences and engraftment information
diff_data <- data.frame(
Pair_ID = seq(1, n/2),
CXCL1_Diff = paired_diff,
Engraftment = engraftment
)
# Define custom colors for the groups
custom_colors <- c("N" = "grey", "Y" = "#7e73ab", "NA" = "black")
# Plot the differences as a box plot grouped by engraftment using ggplot2 with custom colors
engraftment_plot <- ggplot(diff_data, aes(x = Engraftment, y = CXCL1_Diff, fill = Engraftment)) +
geom_boxplot() +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
labs(title = "Differences in CXCL1 Secretion as a Function of Engraftment",
x = "Engraftment", y = "Change in [CXCL1] pg/mL")
ggsave('engraftment.png', plot = engraftment_plot, height=4, width=6, units='in', dpi=300)
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(multcomp)
optical_densities <- c(0.38, 0.37, 0.3, 0.22, 0.11, 0.05, 0.022, 0)
concentrations <- c(10000, 5000, 2500, 1250, 625, 312.25, 155, 0)
data <- data.frame(Concentration = concentrations, OpticalDensity = optical_densities)
# Set the file name, dimensions, and resolution
png("barplot_high_res.png", width = 6, height = 4, units = "in", res = 300)
# Create the plot
barplot(optical_densities, names.arg = concentrations,
xlab = "[MDP] ng/mL", ylab = "Nod2 Activity\n(Corrected OD650)",
main = "HekBlue Standard Curve",
col ="#7e73ab")
dev.off()
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(multcomp)
optical_densities <- c(0.38, 0.37, 0.3, 0.22, 0.11, 0.05, 0.022, 0)
concentrations <- c(10000, 5000, 2500, 1250, 625, 312.25, 155, 0)
data <- data.frame(Concentration = concentrations, OpticalDensity = optical_densities)
# Set the file name, dimensions, and resolution
png("barplot_high_res.png", width = 6, height = 4, units = "in", res = 300)
# Create the plot
barplot(optical_densities, names.arg = concentrations,
xlab = "[MDP] ng/mL", ylab = "Nod2 Activity (Corrected OD650)",
main = "HekBlue Standard Curve",
col ="#7e73ab")
dev.off()
# Load the required packages
library(ggplot2)
PBS <- c(0.0809, 0.04)
SagA <- c(0.6136, 0.4643, 0.4287, 0.5552)
# Combine the data into a data frame
data <- data.frame(
Group = c(rep("PBS", length(PBS)), rep("SagA", length(SagA))),
Value = c(PBS, SagA)
)
# Define custom colors for each group
custom_colors <- c("PBS" = "grey", "SagA" = "#7E73AB")
# Calculate the mean and standard error for each group
mean_se_values <- aggregate(Value ~ Group, data, function(x) c(mean = mean(x), se = sd(x)/sqrt(length(x))))
mean_se_values <- do.call(data.frame, mean_se_values)
names(mean_se_values)[2:3] <- c("Mean", "SE")
# Create the plot
p <- plot <- ggplot(data, aes(x = Group, y = Value, color = Group)) +
geom_point(size = 4, position = position_dodge(width = 0.5)) +
geom_errorbar(data = mean_se_values, aes(x = Group, ymin = Mean - SE, ymax = Mean + SE), width = 0.2, color = "black", inherit.aes = FALSE) +
geom_segment(data = mean_se_values, aes(x = as.numeric(Group) - 0.1, xend = as.numeric(Group) + 0.1, y = Mean, yend = Mean), linetype = "dashed", color = "black", size = 1) +
scale_color_manual(values = custom_colors) +
labs(x = "Treatment", y = "Nod2 Activity (Corrected OD650)") +
theme_minimal()
# Display the plot
print(plot)
ggsave('HDC+SaGA.png', plot=p, height=2, width=4, units='in', dpi=600, )
ggsave('HDC+SaGA.png', plot=p, height=3, width=4, units='in', dpi=600, )
# Load the necessary libraries
library(ggplot2)
library(tidyr)
# Create the data frame
data <- data.frame(
Day1 = c(-0.03855, -0.0182, 0.05135, -0.00695, -0.01835, -0.002, 0.0194, 0.09385),
Day7 = c(0.0092, -0.0123, 0.0101, 0.01785, 0.0363, 0.06105, 0.0166, 0.0314),
Day14 = c(0.0614, 0.08735, 0.0864, 0.0213, 0.11575, 0.0217, 0.0719, 0.09945),
Treatment = c('E. faecalis SagA', 'E. faecalis SagA', 'E. faecalis SagA',
'E. faecalis SagA', 'E. faecalis WT', 'E. faecalis WT', 'E. faecalis WT', 'E. faecalis WT')
)
# Reshape the data into a longer format
long_data <- data %>%
pivot_longer(cols = -Treatment, names_to = "Day", values_to = "Value")
# Convert the Day column to a factor with the correct order and labels
long_data$Day <- factor(long_data$Day, levels = c("Day1", "Day7", "Day14"), labels = c("Day -1", "Day 7", "Day 14"))
# Create the box plot
p <- ggplot(long_data, aes(x = Day, y = Value, fill = Treatment)) +
geom_boxplot() +
scale_fill_manual(values = c("E. faecalis WT" = "grey", "E. faecalis SagA" = "#7e73ab")) +
theme_minimal() +
labs(x = "Day",
y = "Nod2 Activation (Corrected OD650)",
fill = "Treatment")
print(p)
ggsave('HBtimePoint.png', plot = p, height=4, width=6, units = 'in', dpi=300)
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(multcomp)
# Read excel file
df <- read_excel("C:\\Users\\odesa\\OneDrive - University of Toronto\\HekBlue(30.03.23)-Giuliano.xlsx", sheet = "Sheet2")
print(df)
# Filter data to create subsets for each box
subset1 <- df %>% filter(Day == 0, `EF-SagA` == 1, Consortium == 0, `HDC/SPF` == 1) %>% select(`1/100`)
subset2 <- df %>% filter(Day == 0, `EF-SagA` == 1, Consortium == 1, `HDC/SPF` == 1) %>% select(`1/100`)
subset3 <- df %>% filter(Day == 0, `EF-SagA` == 0, Consortium == 1, `HDC/SPF` == 1) %>% select(`1/100`)
#subset4 <- df %>% filter(Day == 0, `EF-SagA` == 0, Consortium == 0, `HDC/SPF` == 0) %>% select(`1/100`)
subset5 <- df %>% filter(Day == 10, `EF-SagA` == 0, Consortium == 0, `HDC/SPF` == 1) %>% select(`1/100`)
# Combine subsets into a single data frame
data <- bind_rows(subset1, subset2, subset3, subset5, .id = "group")
# Create a vector with custom colors for each group
custom_colors <- c("#7e73ab", "#A11AD3", "#D17FEF", "grey")
ggplot(data, aes(x = group, y = `1/100`, fill = group)) +
geom_boxplot() +
scale_x_discrete(labels = c('Day 10\nHDC\nEF-SagA', 'Day 10\nHDC\nEF-SagA\n+Consortium', 'Day 10\nHDC\n+Consortium', 'Day 0\nHDC')) +
labs(y = "Corected OD 650", x = 'Group') +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = group, y = `1/100`, fill = group)) +
geom_boxplot() +
scale_x_discrete(labels = c('Day 10\nHDC\nEF-SagA', 'Day 10\nHDC\nEF-SagA\n+Consortium', 'Day 10\nHDC\n+Consortium', 'Day 0\nHDC')) +
labs(y = "Nod2 Activation (Corected OD 650)", x = 'Group') +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
# Load the required packages
library(ggplot2)
library(dplyr)
library(tidyr)
library(readxl)
library(multcomp)
# Read excel file
df <- read_excel("C:\\Users\\odesa\\OneDrive - University of Toronto\\HekBlue(30.03.23)-Giuliano.xlsx", sheet = "Sheet2")
print(df)
subset5 <- df %>% filter(Day == 10, `EF-SagA` == 0, Consortium == 0, `HDC/SPF` == 1) %>% select(`1/100`)
subset3 <- df %>% filter(Day == 0, `EF-SagA` == 0, Consortium == 1, `HDC/SPF` == 1) %>% select(`1/100`)
subset2 <- df %>% filter(Day == 0, `EF-SagA` == 1, Consortium == 1, `HDC/SPF` == 1) %>% select(`1/100`)
subset1 <- df %>% filter(Day == 0, `EF-SagA` == 1, Consortium == 0, `HDC/SPF` == 1) %>% select(`1/100`)
# Combine subsets into a single data frame
data <- bind_rows(subset5, subset3, subset2, subset1, .id = "group")
# Create a vector with custom colors for each group
custom_colors <- c("grey", "#A11AD3", "#D17FEF", "#7e73ab")
ggplot(data, aes(x = group, y = `1/100`, fill = group)) +
geom_boxplot() +
scale_x_discrete(labels = c('Day 10\nHDC\nEF-SagA', 'Day 10\nHDC\nEF-SagA\n+Consortium', 'Day 10\nHDC\n+Consortium', 'Day 0\nHDC')) +
labs(y = "Nod2 Activation (Corected OD 650)", x = 'Group') +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
ggplot(data, aes(x = group, y = `1/100`, fill = group)) +
geom_boxplot() +
scale_x_discrete(labels = c('Day 0\nHDC', 'Day 10\nHDC\n+Consortium', 'Day 10\nHDC\nEF-SagA\n+Consortium', 'Day 10\nHDC\nEF-SagA')) +
labs(y = "Nod2 Activation (Corected OD 650)", x = 'Group') +
scale_fill_manual(values = custom_colors) +
theme_minimal() +
theme(legend.position = "none")
ggsave("Giulianoconsortium.png", width = 6, height = 4, dpi = 300, units = "in")
# Load required libraries
library(tidyverse)
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
# Load required libraries
library(tidyverse)
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
# Load required libraries
library(tidyverse)
library(readr)
install.packages("readr")
# Load required libraries
library(tidyverse)
library(readr)
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
# Plot a bar chart
ggplot(domain_percentages, aes(x = reorder(Domain, -Percentage), y = Percentage)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
labs(title = "Percentage of proteins containing each domain",
x = "Domain",
y = "Percentage") +
theme_minimal()
# Load required libraries
library(ggplot2)
library(dplyr)
library(tidyverse)
library(readr)
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
# Plot a bar chart
ggplot(domain_percentages, aes(x = reorder(Domain, -Percentage), y = Percentage)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
labs(title = "Percentage of proteins containing each domain",
x = "Domain",
y = "Percentage") +
theme_minimal()
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
ggplot(domain_percentages, aes(x = reorder(Domain, -Percentage), y = Percentage, fill = Domain)) +
geom_bar(stat = "identity") +
labs(title = "Percentage of proteins containing each domain",
x = "Domain",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis labels
# Read the CSV file
domain_percentages <- read_csv("C:/users/odesa/Desktop/Figures/domain_percentages.csv")
ggplot(domain_percentages, aes(x = reorder(Domain, -Percentage), y = Percentage, fill = Domain)) +
geom_bar(stat = "identity") +
labs(x = "Domain",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis labels
# Save the plot as a high-resolution PNG
ggsave("Domains.png", plot, width = 6, height = 4, dpi = 600)
p <- ggplot(domain_percentages, aes(x = reorder(Domain, -Percentage), y = Percentage, fill = Domain)) +
geom_bar(stat = "identity") +
labs(x = "Domain",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis labels
# Save the plot as a high-resolution PNG
ggsave("Domains.png", plot = p, width = 6, height = 4, dpi = 600)
install.packages('dada2')
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
library(readr)
library(ggpicrust2)
library(tibble)
library(tidyverse)
library(ggprism)
library(patchwork)
# Load necessary data: abundance data and metadata
abundance_file <- "C:\\Users\\odesa\\Desktop\\16s\\picrust2_results\\KO_metagenome_out\\pred_metagenome_contrib.tsv"
metadata <- read_delim(
"C:\\Users\\odesa\\Desktop\\16s\\meta.csv",
delim = ",",
escape_double = FALSE,
trim_ws = TRUE
)
# Run ggpicrust2 with input file path
results_file_input <- ggpicrust2(file = abundance_file,
metadata = metadata,
group = "function", # For example dataset, group = "Environment"
pathway = "KO",
daa_method = "LinDA",
ko_to_kegg = TRUE,
order = "pathway_class",
p_values_bar = TRUE,
x_lab = "pathway_name")
library(curatedMetagenomicData)
library(Biobase)
library(BiocManager)
library(BiocParallel)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
install.packages('ggbiplot')
install.packages(Rtools)
library(devtools)
install.packages(devtools)
install.packages("devtools")
install_github("vqv/ggbiplot")
install.packages('install_github')
install.packages('Rtools')
R --version
--version
version
library(devtools)
version
library(Boruta)
install.packages('Boruta')
library(Boruta)
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(czm_clr(count_df),
as.factor(meta_df[rownames(count_df), "status"]),
maxRuns = 1000)
}
pooled_data <- read_feather('pooled_abundance_data.feather')
pooled_data <- as.data.frame(pooled_data)
metadata <- read_feather('metadf.feather')
metadata <- as.data.frame(metadata)
# add the 'config' column from metadata to the pooled_data df
pooled_data$config <- metadata[match(pooled_data$SampleIdentifier, metadata$SampleIdentifier),]$config
# Save the identifier columns
identifiers_and_config <- pooled_data[, c("SampleIdentifier", "config")]
# List of columns needed
enzymes = c('Amidase', 'DD-carboxypeptidase', 'DD-endopeptidase', 'DL-endopeptidase',
'Glucosaminidase', 'LD-carboxypeptidase', 'LD-endopeptidase', 'Muramidase')
#make new DF with only these columns
filtered_pooled_data <- pooled_data[enzymes]
# Apply CLR Normalization and change to DF
CLR_pooled_data <- czm_clr(filtered_pooled_data)
CLR_pooled_data <- as.data.frame(CLR_pooled_data)
library(feather)
library(ggplot2)
library(tidyverse)
library(Boruta)
czm_clr <- function(count_df) {
set.seed(101)
clr <- t(apply(count_df, 1, function(x){log(x) - mean(log(x))}))
clr
}
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(czm_clr(count_df),
as.factor(meta_df[rownames(count_df), "status"]),
maxRuns = 1000)
}
pooled_data <- read_feather('pooled_abundance_data.feather')
pooled_data <- as.data.frame(pooled_data)
metadata <- read_feather('metadf.feather')
setwd("C:/Users/odesa/Desktop/CRCFinal/CRC-Final")
library(feather)
library(ggplot2)
library(tidyverse)
library(Boruta)
czm_clr <- function(count_df) {
set.seed(101)
clr <- t(apply(count_df, 1, function(x){log(x) - mean(log(x))}))
clr
}
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(czm_clr(count_df),
as.factor(meta_df[rownames(count_df), "status"]),
maxRuns = 1000)
}
pooled_data <- read_feather('pooled_abundance_data.feather')
pooled_data <- as.data.frame(pooled_data)
metadata <- read_feather('metadf.feather')
metadata <- as.data.frame(metadata)
# add the 'config' column from metadata to the pooled_data df
pooled_data$config <- metadata[match(pooled_data$SampleIdentifier, metadata$SampleIdentifier),]$config
# Save the identifier columns
identifiers_and_config <- pooled_data[, c("SampleIdentifier", "config")]
# List of columns needed
enzymes = c('Amidase', 'DD-carboxypeptidase', 'DD-endopeptidase', 'DL-endopeptidase',
'Glucosaminidase', 'LD-carboxypeptidase', 'LD-endopeptidase', 'Muramidase')
#make new DF with only these columns
filtered_pooled_data <- pooled_data[enzymes]
# Apply CLR Normalization and change to DF
CLR_pooled_data <- czm_clr(filtered_pooled_data)
CLR_pooled_data <- as.data.frame(CLR_pooled_data)
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(count_df,
as.factor(meta_df[rownames(count_df), "status"]),
maxRuns = 1000)
}
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(count_df,
as.factor(meta_df[rownames(count_df), "config"]),
maxRuns = 1000)
}
# Apply Boruta
boruta <- boruta(CLR_pooled_data, metadata)
# Plot Boruta
plot(boruta, xlab = "", xaxt = "n", main = "Boruta Feature Selection", cex.main = 1.5, cex.axis = 1.5, cex.lab = 1.5)
# Plot Boruta
plot(boruta, xlab = "", xaxt = "n", main = "Boruta Feature Selection", cex.main = 1.5, cex.axis = 1.5, cex.lab = 1.5)
axis(1, at = 1:ncol(CLR_pooled_data), labels = colnames(CLR_pooled_data), cex.axis = 1.5, las = 2)
# Apply Boruta
boruta <- boruta(CLR_pooled_data, metadata)
library(feather)
library(ggplot2)
library(tidyverse)
library(Boruta)
czm_clr <- function(count_df) {
set.seed(101)
clr <- t(apply(count_df, 1, function(x){log(x) - mean(log(x))}))
clr
}
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(count_df,
as.factor(meta_df[rownames(count_df), "config"]),
maxRuns = 1000)
}
# Apply Boruta
boruta <- boruta(CLR_pooled_data, metadata)
# Plot Boruta
imp <- attStats(boruta)
# Create a dataframe for plotting
imp_df <- data.frame(
attributes = rownames(imp),
importance = imp$meanImp,
Decision = imp$decision
)
ggplot(imp_df, aes(x = reorder(Attribute, Importance), y = Importance, fill = Decision)) +
geom_bar(stat = "identity") +
coord_flip() + # Flip coordinates to make it a horizontal bar plot
scale_fill_manual(values = c("Rejected" = "red", "Confirmed" = "green", "Tentative" = "yellow")) +
theme_minimal() +
labs(title = "Feature Importance from Boruta Analysis", x = "Features", y = "Importance (Z-Score)")
# Apply Boruta
boruta <- boruta(CLR_pooled_data, metadata)
library(feather)
library(ggplot2)
library(tidyverse)
library(Boruta)
czm_clr <- function(count_df) {
set.seed(101)
clr <- t(apply(count_df, 1, function(x){log(x) - mean(log(x))}))
clr
}
boruta <- function(count_df, meta_df) {
set.seed(101)
Boruta(count_df,
as.factor(meta_df[rownames(count_df), "config"]),
maxRuns = 1000)
}
# Apply Boruta
boruta <- boruta(CLR_pooled_data, metadata)
# Plot Boruta
imp <- attStats(boruta)
# Create a dataframe for plotting
imp_df <- data.frame(
Attribute = rownames(imp),
Importance = imp$meanImp,
Decision = imp$decision
)
ggplot(imp_df, aes(x = reorder(Attribute, Importance), y = Importance, fill = Decision)) +
geom_bar(stat = "identity") +
coord_flip() + # Flip coordinates to make it a horizontal bar plot
scale_fill_manual(values = c("Rejected" = "red", "Confirmed" = "green", "Tentative" = "yellow")) +
theme_minimal() +
labs(title = "Feature Importance from Boruta Analysis", x = "Features", y = "Importance (Z-Score)")
# Plot using ggplot2
ggplot(imp_df, aes(x = reorder(Attribute, Importance), y = Importance, fill = Decision)) +
geom_bar(stat = "identity") +
coord_flip() + # Flip coordinates to make it a horizontal bar plot
scale_fill_manual(values = c("Rejected" = "red", "Confirmed" = "green", "Tentative" = "yellow")) +
theme_minimal() +
labs(title = "Feature Importance from Boruta Analysis", x = "Features", y = "Importance (Z-Score)")
print(imp_df)
